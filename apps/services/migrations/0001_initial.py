# Generated by Django 5.2.4 on 2025-07-18 21:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Service Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('service_type', models.CharField(choices=[('visa', 'Visa'), ('hotel', 'Hotels'), ('transport', 'Transport'), ('food', 'Food'), ('laundry', 'Laundry'), ('air_ticket', 'Air Ticket Group Fare Umrah'), ('umrah_guide', 'Umrah Guide'), ('umrah_kit', 'Umrah Kit'), ('jam_jam_water', 'Jam Jam Water'), ('hajj_package', 'Hajj Package'), ('umrah_package', 'Umrah Package')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_currency', models.CharField(default='INR', max_length=3)),
                ('price_per', models.CharField(default='person', max_length=50)),
                ('duration', models.CharField(blank=True, max_length=100)),
                ('duration_in_days', models.IntegerField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(default='India', max_length=100)),
                ('available_from', models.DateField(blank=True, null=True)),
                ('available_to', models.DateField(blank=True, null=True)),
                ('is_always_available', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('published', 'Published'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('features', models.JSONField(blank=True, default=list)),
                ('inclusions', models.JSONField(blank=True, default=list)),
                ('exclusions', models.JSONField(blank=True, default=list)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('booking_requirements', models.TextField(blank=True)),
                ('views_count', models.IntegerField(default=0)),
                ('leads_count', models.IntegerField(default=0)),
                ('bookings_count', models.IntegerField(default=0)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.CharField(blank=True, max_length=300)),
                ('departure_date', models.DateField(blank=True, null=True)),
                ('return_date', models.DateField(blank=True, null=True)),
                ('departure_city', models.CharField(blank=True, max_length=100)),
                ('arrival_city', models.CharField(blank=True, max_length=100)),
                ('airline', models.CharField(blank=True, max_length=100)),
                ('seat_availability', models.IntegerField(blank=True, null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_popular', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'super_admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_services', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='services.servicecategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceFAQ',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=300)),
                ('answer', models.TextField()),
                ('display_order', models.IntegerField(default=0)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='services.service')),
            ],
            options={
                'ordering': ['display_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to='service_images/')),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='services.servicecategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='service',
            name='featured_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='featured_services', to='services.serviceimage'),
        ),
        migrations.AddField(
            model_name='service',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='services', to='services.serviceimage'),
        ),
        migrations.CreateModel(
            name='ServiceView',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_logs', to='services.service')),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceAvailability',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('available_slots', models.IntegerField(default=1)),
                ('booked_slots', models.IntegerField(default=0)),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='services.service')),
            ],
            options={
                'ordering': ['date'],
                'unique_together': {('service', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['service_type', 'status'], name='services_se_service_289846_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['provider', 'status'], name='services_se_provide_312822_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['city', 'service_type'], name='services_se_city_dc5a10_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['departure_date'], name='services_se_departu_3b003e_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['price'], name='services_se_price_4a7bf9_idx'),
        ),
    ]
